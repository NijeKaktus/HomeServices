// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  SERVICE_PROVIDER
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  phone     String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer        Customer?
  serviceProvider ServiceProvider?
  admin           Admin?
  sentMessages    Message[]
  bookingMessages BookingMessage[]

  @@map("users")
}

model Customer {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  address String?
  city    String?

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings      Booking[]
  reviews       Review[]
  conversations Conversation[]

  @@map("customers")
}

model ServiceProvider {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  bio          String?
  experience   Int     @default(0)
  rating       Float   @default(0)
  totalReviews Int     @default(0)
  isVerified   Boolean @default(false)

  user          User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories    ServiceProviderCategory[]
  coverageAreas CoverageArea[]
  portfolio     PortfolioItem[]
  bookings      Booking[]
  reviews       Review[]
  conversations Conversation[]

  @@map("service_providers")
}

model Admin {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  permissions String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  icon        String?
  isActive    Boolean @default(true)

  services         Service[]
  serviceProviders ServiceProviderCategory[]

  @@map("categories")
}

model Service {
  id          Int     @id @default(autoincrement())
  categoryId  Int
  name        String
  description String
  basePrice   Float?
  unit        String?
  isActive    Boolean @default(true)

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("services")
}

model ServiceProviderCategory {
  id                Int @id @default(autoincrement())
  serviceProviderId Int
  categoryId        Int

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  category        Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([serviceProviderId, categoryId])
  @@map("service_provider_categories")
}

model CoverageArea {
  id                Int    @id @default(autoincrement())
  serviceProviderId Int
  city              String

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@map("coverage_areas")
}

model PortfolioItem {
  id                Int      @id @default(autoincrement())
  serviceProviderId Int
  title             String
  description       String
  imageUrl          String
  categoryId        Int?
  createdAt         DateTime @default(now())

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

model Booking {
  id                Int           @id @default(autoincrement())
  customerId        Int
  serviceProviderId Int
  status            BookingStatus @default(PENDING)
  scheduledDate     DateTime
  scheduledTime     String
  address           String
  city              String
  description       String
  estimatedPrice    Float?
  finalPrice        Float?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  customer        Customer         @relation(fields: [customerId], references: [id])
  serviceProvider ServiceProvider  @relation(fields: [serviceProviderId], references: [id])
  review          Review?
  messages        BookingMessage[]

  @@map("bookings")
}

model Review {
  id                Int      @id @default(autoincrement())
  bookingId         Int?     @unique
  customerId        Int
  serviceProviderId Int
  rating            Int
  comment           String?
  createdAt         DateTime @default(now())

  booking         Booking?        @relation(fields: [bookingId], references: [id])
  customer        Customer        @relation(fields: [customerId], references: [id])
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  @@map("reviews")
}

model Conversation {
  id            Int      @id @default(autoincrement())
  customerId    Int
  providerId    Int
  lastMessage   String?
  lastMessageAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customer Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  provider ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([customerId, providerId])
  @@map("conversations")
}

model Message {
  id             Int      @id @default(autoincrement())
  conversationId Int
  senderId       Int
  content        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model BookingMessage {
  id        Int      @id @default(autoincrement())
  bookingId Int
  senderId  Int
  content   String
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  sender  User    @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("booking_messages")
}
